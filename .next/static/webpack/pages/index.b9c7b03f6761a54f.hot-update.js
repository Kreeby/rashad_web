"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/EarthGlobe.tsx":
/*!***********************************!*\
  !*** ./components/EarthGlobe.tsx ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EarthGlobe: function() { return /* binding */ EarthGlobe; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls.js */ \"./node_modules/three/examples/jsm/controls/OrbitControls.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n// Create land texture with green/brown colors for continents\nfunction createLandTexture() {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = 1024;\n    canvas.height = 512;\n    const ctx = canvas.getContext(\"2d\");\n    // Base gradient for land colors\n    const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\n    gradient.addColorStop(0, \"#2d5016\"); // Dark green\n    gradient.addColorStop(0.25, \"#4a7c59\"); // Medium green\n    gradient.addColorStop(0.5, \"#8fbc8f\"); // Light green\n    gradient.addColorStop(0.75, \"#a0522d\"); // Brown\n    gradient.addColorStop(1, \"#8b4513\"); // Dark brown\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    // Add continent-like shapes with varying colors\n    ctx.fillStyle = \"#228b22\"; // Forest green\n    ctx.globalAlpha = 0.8;\n    // North America\n    ctx.beginPath();\n    ctx.ellipse(200, 150, 80, 120, 0, 0, 2 * Math.PI);\n    ctx.fill();\n    // South America\n    ctx.beginPath();\n    ctx.ellipse(250, 350, 40, 100, 0, 0, 2 * Math.PI);\n    ctx.fill();\n    // Europe/Asia\n    ctx.beginPath();\n    ctx.ellipse(600, 150, 200, 100, 0, 0, 2 * Math.PI);\n    ctx.fill();\n    // Africa\n    ctx.beginPath();\n    ctx.ellipse(550, 250, 60, 120, 0, 0, 2 * Math.PI);\n    ctx.fill();\n    // Australia\n    ctx.beginPath();\n    ctx.ellipse(800, 350, 60, 40, 0, 0, 2 * Math.PI);\n    ctx.fill();\n    // Add some texture variation\n    ctx.fillStyle = \"#32cd32\"; // Lime green\n    ctx.globalAlpha = 0.3;\n    // Add some lighter areas for variety\n    for(let i = 0; i < 20; i++){\n        const x = Math.random() * canvas.width;\n        const y = Math.random() * canvas.height;\n        const size = 20 + Math.random() * 60;\n        ctx.beginPath();\n        ctx.arc(x, y, size, 0, 2 * Math.PI);\n        ctx.fill();\n    }\n    return canvas;\n}\nfunction EarthGlobe(param) {\n    let { locations, onLocationHover, hoveredLocation } = param;\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Hold onto our marker meshes so we can raycast only them:\n    const markerMeshes = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const particlesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const atmosphereRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const gridRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!containerRef.current) return;\n        const width = containerRef.current.clientWidth;\n        const height = containerRef.current.clientHeight;\n        // Scene / Camera / Renderer\n        const scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n        const camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(45, width / height, 0.1, 1000);\n        camera.position.set(0, 0.5, 2.5);\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderer({\n            antialias: true,\n            alpha: true\n        });\n        renderer.setSize(width, height);\n        containerRef.current.appendChild(renderer.domElement);\n        // OrbitControls\n        const controls = new three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_3__.OrbitControls(camera, renderer.domElement);\n        controls.enablePan = false;\n        controls.enableZoom = true;\n        controls.minDistance = 1.5;\n        controls.maxDistance = 3;\n        controls.minPolarAngle = Math.PI / 6;\n        controls.maxPolarAngle = Math.PI - Math.PI / 6;\n        controls.autoRotate = true;\n        controls.autoRotateSpeed = 0.2;\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.05;\n        controls.rotateSpeed = 0.3;\n        // Lights\n        scene.add(new three__WEBPACK_IMPORTED_MODULE_2__.AmbientLight(0x555555));\n        const dirLight = new three__WEBPACK_IMPORTED_MODULE_2__.DirectionalLight(0xffffff, 1);\n        scene.add(dirLight);\n        // Earth with real daymap texture\n        const earthMap = new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"/textures/earth_water.png\");\n        const earthGeo = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(1, 64, 64);\n        // Create a stylized land texture\n        const landMap = new three__WEBPACK_IMPORTED_MODULE_2__.CanvasTexture(createLandTexture());\n        // Load the water mask & invert it into an alphaMap\n        const loader = new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader();\n        loader.load(\"/textures/earth_water.png\", (waterTex)=>{\n            const img = waterTex.image;\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = img.width;\n            canvas.height = img.height;\n            const ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, 0, 0);\n            const imgData = ctx.getImageData(0, 0, img.width, img.height);\n            const data = imgData.data;\n            // invert: white→0 (transparent), black→255 (opaque)\n            for(let i = 0; i < data.length; i += 4){\n                const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n                const inv = 255 - avg;\n                data[i] = data[i + 1] = data[i + 2] = inv;\n                data[i + 3] = 255;\n            }\n            ctx.putImageData(imgData, 0, 0);\n            const alphaMap = new three__WEBPACK_IMPORTED_MODULE_2__.CanvasTexture(canvas);\n            alphaMap.needsUpdate = true;\n            // Create your earth material with continents opaque, oceans transparent\n            const earthMat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshStandardMaterial({\n                map: landMap,\n                alphaMap: alphaMap,\n                transparent: true,\n                alphaTest: 0.5,\n                metalness: 0.1,\n                roughness: 0.8\n            });\n            // Build and add the mesh\n            const earthMesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(earthGeo, earthMat);\n            scene.add(earthMesh);\n        });\n        // Atmospheric glow effect\n        const atmosphereGeo = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(1.05, 64, 64);\n        const atmosphereMat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n            color: 0x06b6d4,\n            transparent: true,\n            opacity: 0.1,\n            side: three__WEBPACK_IMPORTED_MODULE_2__.BackSide\n        });\n        const atmosphere = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(atmosphereGeo, atmosphereMat);\n        scene.add(atmosphere);\n        atmosphereRef.current = atmosphere;\n        // Particle field around Earth\n        const particleCount = 200;\n        const particles = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();\n        const positions = new Float32Array(particleCount * 3);\n        const colors = new Float32Array(particleCount * 3);\n        for(let i = 0; i < particleCount; i++){\n            const radius = 1.5 + Math.random() * 2;\n            const theta = Math.random() * Math.PI * 2;\n            const phi = Math.random() * Math.PI;\n            positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);\n            positions[i * 3 + 1] = radius * Math.cos(phi);\n            positions[i * 3 + 2] = radius * Math.sin(phi) * Math.sin(theta);\n            colors[i * 3] = 0.2 + Math.random() * 0.8; // R\n            colors[i * 3 + 1] = 0.5 + Math.random() * 0.5; // G\n            colors[i * 3 + 2] = 0.8 + Math.random() * 0.2; // B\n        }\n        particles.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_2__.BufferAttribute(positions, 3));\n        particles.setAttribute(\"color\", new three__WEBPACK_IMPORTED_MODULE_2__.BufferAttribute(colors, 3));\n        const particleMaterial = new three__WEBPACK_IMPORTED_MODULE_2__.PointsMaterial({\n            size: 0.02,\n            vertexColors: true,\n            transparent: true,\n            opacity: 0.6\n        });\n        const particleSystem = new three__WEBPACK_IMPORTED_MODULE_2__.Points(particles, particleMaterial);\n        scene.add(particleSystem);\n        particlesRef.current = particleSystem;\n        // Grid overlay effect\n        const gridGeo = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(1.02, 32, 32);\n        const gridMat = new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n            color: 0x06b6d4,\n            transparent: true,\n            opacity: 0.05,\n            wireframe: true\n        });\n        const grid = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(gridGeo, gridMat);\n        scene.add(grid);\n        gridRef.current = grid;\n        // Helper to convert lat/lng → sphere coords\n        const latLngTo3D = (lat, lng, radius)=>{\n            const phi = (90 - lat) * (Math.PI / 180);\n            const theta = (lng + 180) * (Math.PI / 180);\n            return {\n                x: -(radius * Math.sin(phi) * Math.cos(theta)),\n                y: radius * Math.cos(phi),\n                z: radius * Math.sin(phi) * Math.sin(theta)\n            };\n        };\n        // Marker sizing/color\n        const getSize = (s)=>s === \"large\" ? 0.15 : s === \"medium\" ? 0.1 : 0.05;\n        const getColor = (t)=>t === \"work\" ? \"#06b6d4\" : \"#8b5cf6\";\n        // Create one sphere‐mesh per location and store in markerMeshes\n        markerMeshes.current = locations.map((loc)=>{\n            const pos = latLngTo3D(loc.lat, loc.lng, 1.02);\n            const color = new three__WEBPACK_IMPORTED_MODULE_2__.Color(getColor(loc.type));\n            const mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(getSize(loc.size), 16, 16), new three__WEBPACK_IMPORTED_MODULE_2__.MeshStandardMaterial({\n                color,\n                emissive: color,\n                emissiveIntensity: 0.2\n            }));\n            mesh.position.set(pos.x, pos.y, pos.z);\n            mesh.userData = {\n                locationId: loc.id\n            };\n            scene.add(mesh);\n            return mesh;\n        });\n        // Raycaster for hover\n        const raycaster = new three__WEBPACK_IMPORTED_MODULE_2__.Raycaster();\n        const mouse = new three__WEBPACK_IMPORTED_MODULE_2__.Vector2();\n        const onMouseMove = (e)=>{\n            var _hits_;\n            const rect = renderer.domElement.getBoundingClientRect();\n            mouse.x = (e.clientX - rect.left) / rect.width * 2 - 1;\n            mouse.y = -((e.clientY - rect.top) / rect.height) * 2 + 1;\n            raycaster.setFromCamera(mouse, camera);\n            // Only test against our markers\n            const hits = raycaster.intersectObjects(markerMeshes.current, false);\n            var _hits__object_userData_locationId;\n            const hoveredId = (_hits__object_userData_locationId = (_hits_ = hits[0]) === null || _hits_ === void 0 ? void 0 : _hits_.object.userData.locationId) !== null && _hits__object_userData_locationId !== void 0 ? _hits__object_userData_locationId : null;\n            onLocationHover(hoveredId);\n            // update emissive intensity\n            markerMeshes.current.forEach((m)=>{\n                const mat = m.material;\n                mat.emissiveIntensity = m.userData.locationId === hoveredId ? 0.5 : 0.2;\n            });\n            // Pulse atmosphere when hovering\n            if (atmosphereRef.current) {\n                const atmosphereMat = atmosphereRef.current.material;\n                atmosphereMat.opacity = hoveredId ? 0.2 : 0.1;\n            }\n        };\n        renderer.domElement.addEventListener(\"mousemove\", onMouseMove);\n        // Animation loop\n        const animate = ()=>{\n            requestAnimationFrame(animate);\n            // Rotate earth via controls.autoRotate\n            controls.update();\n            // Update sunlight based on UTC hour\n            const now = new Date();\n            const hours = now.getUTCHours() + now.getUTCMinutes() / 60 + now.getUTCSeconds() / 3600;\n            const theta = hours / 24 * Math.PI * 2;\n            const dist = 100;\n            dirLight.position.set(dist * Math.cos(theta), 0, dist * Math.sin(theta));\n            // Animate particles\n            if (particlesRef.current) {\n                particlesRef.current.rotation.y += 0.001;\n                particlesRef.current.rotation.x += 0.0005;\n            }\n            // Animate grid\n            if (gridRef.current) {\n                gridRef.current.rotation.y += 0.002;\n            }\n            // Pulse atmosphere\n            if (atmosphereRef.current) {\n                const time = Date.now() * 0.001;\n                const atmosphereMat = atmosphereRef.current.material;\n                atmosphereMat.opacity = 0.1 + Math.sin(time * 2) * 0.05;\n            }\n            renderer.render(scene, camera);\n        };\n        animate();\n        // Resize handler\n        const onResize = ()=>{\n            const w = containerRef.current.clientWidth;\n            const h = containerRef.current.clientHeight;\n            camera.aspect = w / h;\n            camera.updateProjectionMatrix();\n            renderer.setSize(w, h);\n        };\n        window.addEventListener(\"resize\", onResize);\n        // Cleanup\n        return ()=>{\n            window.removeEventListener(\"resize\", onResize);\n            renderer.domElement.removeEventListener(\"mousemove\", onMouseMove);\n            containerRef.current.removeChild(renderer.domElement);\n            renderer.dispose();\n        };\n    }, [\n        locations,\n        onLocationHover\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"w-full h-full\"\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Rashad\\\\Downloads\\\\Futuristic Portfolio Website\\\\components\\\\EarthGlobe.tsx\",\n        lineNumber: 368,\n        columnNumber: 10\n    }, this);\n}\n_s(EarthGlobe, \"/GHDQLMX3f0DB5sWXHgt6PTKRb4=\");\n_c = EarthGlobe;\nvar _c;\n$RefreshReg$(_c, \"EarthGlobe\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/EarthGlobe.tsx\n"));

/***/ })

});